// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Driver.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240219202453_MapReverse")]
    partial class MapReverse
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Auto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AutoModelId")
                        .HasColumnType("int");

                    b.Property<int>("CreateYear")
                        .HasColumnType("int");

                    b.Property<long>("DeviceCode")
                        .HasColumnType("bigint");

                    b.Property<long?>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("MineId")
                        .HasColumnType("bigint");

                    b.Property<string>("Pelak")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AutoModelId");

                    b.HasIndex("DocumentId")
                        .IsUnique()
                        .HasFilter("[DocumentId] IS NOT NULL");

                    b.HasIndex("MineId");

                    b.HasIndex("PersonId");

                    b.HasIndex(new[] { "DeviceCode" }, "IX_Auto_DeviceCode");

                    b.HasIndex(new[] { "Pelak" }, "IX_Auto_Pelak");

                    b.HasIndex(new[] { "VIN" }, "IX_Auto_VIN");

                    b.ToTable("AutoDefinations");
                });

            modelBuilder.Entity("Domain.Entities.AutoBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("AutoBrands");
                });

            modelBuilder.Entity("Domain.Entities.AutoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutoBrandId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("AutoBrandId");

                    b.ToTable("AutoModels");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cites");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("lat")
                        .HasColumnType("decimal(12,8)");

                    b.Property<decimal>("lng")
                        .HasColumnType("decimal(12,8)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Domain.Entities.Mine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("MineDefinations");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComputedColumnSql("Case  when [FirstName] is null and [LastName] is null then [MobileNumber] else [FirstName]+' '+[LastName] end");

                    b.Property<long?>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("PersonCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId")
                        .IsUnique()
                        .HasFilter("[DocumentId] IS NOT NULL");

                    b.HasIndex(new[] { "PersonCode" }, "IX_Person_PersonCode");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "کاربر ارشد سیستم",
                            IsActive = true,
                            RoleName = "SUPER_ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "کاربر ارشد",
                            IsActive = true,
                            RoleName = "ADMIN"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "کاربر ناحیه",
                            IsActive = true,
                            RoleName = "PROVINCE_ADMIN"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "کاربر معدن",
                            IsActive = true,
                            RoleName = "MINE_USER"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "UserName" }, "IX_User_UserName");

                    b.HasIndex(new[] { "UserName", "Password" }, "IX_User_UserName_Password");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.UsersToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsExpire")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsersTokens");
                });

            modelBuilder.Entity("Driver.Domain.Entities.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AutoId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Guid" }, "IX_Document_Guid");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Driver.Domain.Entities.DocumentContent", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentContents");
                });

            modelBuilder.Entity("Driver.Domain.Entities.MapReverse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressCompact")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "address_compact");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Neighbourhood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Penult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plaque")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "postal_address");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "postal_code");

                    b.Property<string>("Primary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuralDistrict")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "rural_district");

                    b.Property<string>("Village")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MapReverses");
                });

            modelBuilder.Entity("Driver.Domain.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Driver.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PermisionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PermisionId" }, "IX_Permissio_PermisionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "نمایش معادن",
                            Name = "MineView",
                            PermisionId = 200
                        },
                        new
                        {
                            Id = 2,
                            Description = "ایجاد معادن",
                            Name = "MineCreate",
                            PermisionId = 201
                        },
                        new
                        {
                            Id = 3,
                            Description = "ویرایش معادن",
                            Name = "MineEdit",
                            PermisionId = 202
                        },
                        new
                        {
                            Id = 4,
                            Description = "حذف معادن",
                            Name = "MineDelete",
                            PermisionId = 203
                        },
                        new
                        {
                            Id = 5,
                            Description = "نمایش برند خودرو",
                            Name = "AutoBrandView",
                            PermisionId = 210
                        },
                        new
                        {
                            Id = 6,
                            Description = "ایجاد برند خودرو",
                            Name = "AutoBrandCreate",
                            PermisionId = 211
                        },
                        new
                        {
                            Id = 7,
                            Description = "ویرایش برند خودرو",
                            Name = "AutoBrandEdit",
                            PermisionId = 212
                        },
                        new
                        {
                            Id = 8,
                            Description = "حذف برند خودرو",
                            Name = "AutoBrandDelete",
                            PermisionId = 213
                        },
                        new
                        {
                            Id = 9,
                            Description = "نمایش مدل خودرو",
                            Name = "AutoModelView",
                            PermisionId = 220
                        },
                        new
                        {
                            Id = 10,
                            Description = "ایجاد مدل خودرو",
                            Name = "AutoModelCreate",
                            PermisionId = 221
                        },
                        new
                        {
                            Id = 11,
                            Description = "ویرایش مدل خودرو",
                            Name = "AutoModelEdit",
                            PermisionId = 222
                        },
                        new
                        {
                            Id = 12,
                            Description = "حذف مدل خودرو",
                            Name = "AutoModelDelete",
                            PermisionId = 223
                        },
                        new
                        {
                            Id = 13,
                            Description = "نمایش خودرو",
                            Name = "AutoView",
                            PermisionId = 230
                        },
                        new
                        {
                            Id = 14,
                            Description = "ایجاد خودرو",
                            Name = "AutoCreate",
                            PermisionId = 231
                        },
                        new
                        {
                            Id = 15,
                            Description = "ویرایش خودرو",
                            Name = "AutoEdit",
                            PermisionId = 232
                        },
                        new
                        {
                            Id = 16,
                            Description = "حذف خودرو",
                            Name = "AutoDelete",
                            PermisionId = 233
                        },
                        new
                        {
                            Id = 17,
                            Description = "نمایش رانندگان",
                            Name = "DriverView",
                            PermisionId = 240
                        },
                        new
                        {
                            Id = 18,
                            Description = "ایجاد رانندگان",
                            Name = "DriverCreate",
                            PermisionId = 241
                        },
                        new
                        {
                            Id = 19,
                            Description = "ویرایش رانندگان",
                            Name = "DriverEdit",
                            PermisionId = 242
                        },
                        new
                        {
                            Id = 20,
                            Description = "حذف رانندگان",
                            Name = "DriverDelete",
                            PermisionId = 243
                        },
                        new
                        {
                            Id = 21,
                            Description = "نمایش کاربران",
                            Name = "PersonView",
                            PermisionId = 250
                        },
                        new
                        {
                            Id = 22,
                            Description = "ایجاد کاربران",
                            Name = "PersonCreate",
                            PermisionId = 251
                        },
                        new
                        {
                            Id = 23,
                            Description = "ویرایش کاربران",
                            Name = "PersonEdit",
                            PermisionId = 252
                        },
                        new
                        {
                            Id = 24,
                            Description = "حذف کاربران",
                            Name = "PersonDelete",
                            PermisionId = 253
                        },
                        new
                        {
                            Id = 25,
                            Description = "نمایش استان",
                            Name = "ProvinceView",
                            PermisionId = 260
                        },
                        new
                        {
                            Id = 26,
                            Description = "ایجاد استان",
                            Name = "ProvinceCreate",
                            PermisionId = 261
                        },
                        new
                        {
                            Id = 27,
                            Description = "ویرایش استان",
                            Name = "ProvinceEdit",
                            PermisionId = 262
                        },
                        new
                        {
                            Id = 28,
                            Description = "حذف استان",
                            Name = "ProvinceDelete",
                            PermisionId = 263
                        },
                        new
                        {
                            Id = 29,
                            Description = "نمایش شهر",
                            Name = "CityView",
                            PermisionId = 264
                        },
                        new
                        {
                            Id = 30,
                            Description = "ایجاد شهر",
                            Name = "CityCreate",
                            PermisionId = 265
                        },
                        new
                        {
                            Id = 31,
                            Description = "ویرایش شهر",
                            Name = "CityEdit",
                            PermisionId = 266
                        },
                        new
                        {
                            Id = 32,
                            Description = "حذف شهر",
                            Name = "CityDelete",
                            PermisionId = 267
                        },
                        new
                        {
                            Id = 33,
                            Description = "نمایش مواد معدنی",
                            Name = "MaterialView",
                            PermisionId = 270
                        },
                        new
                        {
                            Id = 34,
                            Description = "ایجاد مواد معدنی",
                            Name = "MaterialCreate",
                            PermisionId = 271
                        },
                        new
                        {
                            Id = 35,
                            Description = "ویرایش مواد معدنی",
                            Name = "MaterialEdit",
                            PermisionId = 272
                        },
                        new
                        {
                            Id = 36,
                            Description = "حذف مواد معدنی",
                            Name = "MaterialDelete",
                            PermisionId = 273
                        },
                        new
                        {
                            Id = 37,
                            Description = "گزارش کارکرد خودروها",
                            Name = "AutoHistoryReportView",
                            PermisionId = 300
                        },
                        new
                        {
                            Id = 38,
                            Description = "گزارش خلاصه عملکرد به تفکیک استان",
                            Name = "ProvinceReportView",
                            PermisionId = 301
                        },
                        new
                        {
                            Id = 39,
                            Description = "گزارش خلاصه عملکرد به تفکیک شهر",
                            Name = "CityReportView",
                            PermisionId = 302
                        },
                        new
                        {
                            Id = 40,
                            Description = "گزارش خلاصه عملکرد به تفکیک معدن",
                            Name = "MineReportView",
                            PermisionId = 303
                        });
                });

            modelBuilder.Entity("Driver.Domain.Entities.RecievedError", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AutoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("DeviceCode")
                        .HasColumnType("bigint");

                    b.Property<long>("ErrorCode")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("RowNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AutoId" }, "IX_RecievedError_AutoId");

                    b.HasIndex(new[] { "DeviceCode" }, "IX_RecievedError_DeviceCode");

                    b.HasIndex(new[] { "RowNumber" }, "IX_RecievedError_RowNumber");

                    b.HasIndex(new[] { "SendDate" }, "IX_RecievedError_SendDate");

                    b.ToTable("Recieved_Error");
                });

            modelBuilder.Entity("Driver.Domain.Entities.RecievedMission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AutoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("DeviceCode")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(12,8)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(12,8)");

                    b.Property<long?>("MapReverseId")
                        .HasColumnType("bigint");

                    b.Property<long>("MissionCode")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("RecievedWeightId")
                        .HasColumnType("bigint");

                    b.Property<long>("RowNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MapReverseId");

                    b.HasIndex("RecievedWeightId")
                        .IsUnique()
                        .HasFilter("[RecievedWeightId] IS NOT NULL");

                    b.HasIndex(new[] { "AutoId" }, "IX_RecievedMission_AutoId");

                    b.HasIndex(new[] { "DeviceCode" }, "IX_RecievedMission_DeviceCode");

                    b.HasIndex(new[] { "MissionCode" }, "IX_RecievedMission_MissionCode");

                    b.HasIndex(new[] { "RecievedWeightId" }, "IX_RecievedMission_RecievedWeightId");

                    b.HasIndex(new[] { "RowNumber" }, "IX_RecievedMission_RowNumber");

                    b.HasIndex(new[] { "SendDate" }, "IX_RecievedMission_SendDate");

                    b.ToTable("Recieved_FinishedMission");
                });

            modelBuilder.Entity("Driver.Domain.Entities.RecievedNumber", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AutoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("DeviceCode")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(12,8)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(12,8)");

                    b.Property<long?>("MapReverseId")
                        .HasColumnType("bigint");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("RowNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MapReverseId");

                    b.HasIndex(new[] { "DeviceCode" }, "IX_RecievedNumber_DeviceCode");

                    b.HasIndex(new[] { "RowNumber" }, "IX_RecievedNumber_RowNumber");

                    b.HasIndex(new[] { "SendDate" }, "IX_RecievedNumber_SendDate");

                    b.HasIndex(new[] { "AutoId" }, "IX_RecievedNumberr_AutoId");

                    b.ToTable("Recieved_Number");
                });

            modelBuilder.Entity("Driver.Domain.Entities.RecievedSpeedAndTemprature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AutoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("DeviceCode")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(12,8)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(12,8)");

                    b.Property<long?>("MapReverseId")
                        .HasColumnType("bigint");

                    b.Property<long>("MissionCode")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("RecievedWeightId")
                        .HasColumnType("bigint");

                    b.Property<long>("RowNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Speed")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("Temprature")
                        .HasColumnType("decimal(12,4)");

                    b.HasKey("Id");

                    b.HasIndex("MapReverseId");

                    b.HasIndex(new[] { "DeviceCode" }, "IX_RecievedSpeedAndTemprature_DeviceCode");

                    b.HasIndex(new[] { "MissionCode" }, "IX_RecievedSpeedAndTemprature_MissionCode");

                    b.HasIndex(new[] { "RecievedWeightId" }, "IX_RecievedSpeedAndTemprature_RecievedWeightId");

                    b.HasIndex(new[] { "RowNumber" }, "IX_RecievedSpeedAndTemprature_RowNumber");

                    b.HasIndex(new[] { "SendDate" }, "IX_RecievedSpeedAndTemprature_SendDate");

                    b.HasIndex(new[] { "AutoId" }, "IX_RecievedSpeedAndTempraturer_AutoId");

                    b.ToTable("Recieved_SpeedAndTemprature");
                });

            modelBuilder.Entity("Driver.Domain.Entities.RecievedWeight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AutoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("DeviceCode")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(12,8)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(12,8)");

                    b.Property<long?>("MapReverseId")
                        .HasColumnType("bigint");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int");

                    b.Property<long>("MissionCode")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("RowNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(20,2)");

                    b.HasKey("Id");

                    b.HasIndex("MapReverseId");

                    b.HasIndex("MaterialId");

                    b.HasIndex(new[] { "AutoId" }, "IX_RecievedWeight_AutoId");

                    b.HasIndex(new[] { "DeviceCode" }, "IX_RecievedWeight_DeviceCode");

                    b.HasIndex(new[] { "MissionCode" }, "IX_RecievedWeight_MissionCode");

                    b.HasIndex(new[] { "RowNumber" }, "IX_RecievedWeight_RowNumber");

                    b.HasIndex(new[] { "SendDate" }, "IX_RecievedWeight_SendDate");

                    b.ToTable("Recieved_StartedMission");
                });

            modelBuilder.Entity("MaterialMine", b =>
                {
                    b.Property<int>("MaterialsId")
                        .HasColumnType("int");

                    b.Property<long>("MinesId")
                        .HasColumnType("bigint");

                    b.HasKey("MaterialsId", "MinesId");

                    b.HasIndex("MinesId");

                    b.ToTable("MaterialMine");
                });

            modelBuilder.Entity("RolesPermissions", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("RolesPermissions");
                });

            modelBuilder.Entity("UsersMines", b =>
                {
                    b.Property<long>("MinesId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("MinesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UsersMines");
                });

            modelBuilder.Entity("UsersProvinces", b =>
                {
                    b.Property<int>("ProvincesId")
                        .HasColumnType("int");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("ProvincesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UsersProvinces");
                });

            modelBuilder.Entity("Domain.Entities.Auto", b =>
                {
                    b.HasOne("Domain.Entities.AutoModel", "AutoModel")
                        .WithMany("Autos")
                        .HasForeignKey("AutoModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Driver.Domain.Entities.Document", "Document")
                        .WithOne("Auto")
                        .HasForeignKey("Domain.Entities.Auto", "DocumentId");

                    b.HasOne("Domain.Entities.Mine", "Mine")
                        .WithMany("Autos")
                        .HasForeignKey("MineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany("Autos")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoModel");

                    b.Navigation("Document");

                    b.Navigation("Mine");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.AutoModel", b =>
                {
                    b.HasOne("Domain.Entities.AutoBrand", "AutoBrand")
                        .WithMany()
                        .HasForeignKey("AutoBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoBrand");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.HasOne("Domain.Entities.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Domain.Entities.Location", b =>
                {
                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.Entities.Mine", b =>
                {
                    b.HasOne("Domain.Entities.Location", "Location")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Mine", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.HasOne("Driver.Domain.Entities.Document", "Document")
                        .WithOne("Person")
                        .HasForeignKey("Domain.Entities.Person", "DocumentId");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Domain.Entities.Province", b =>
                {
                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("Domain.Entities.User", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.UsersToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Driver.Domain.Entities.DocumentContent", b =>
                {
                    b.HasOne("Driver.Domain.Entities.Document", "Document")
                        .WithOne("Content")
                        .HasForeignKey("Driver.Domain.Entities.DocumentContent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Driver.Domain.Entities.RecievedError", b =>
                {
                    b.HasOne("Domain.Entities.Auto", "Auto")
                        .WithMany("RecievedErrors")
                        .HasForeignKey("AutoId");

                    b.Navigation("Auto");
                });

            modelBuilder.Entity("Driver.Domain.Entities.RecievedMission", b =>
                {
                    b.HasOne("Domain.Entities.Auto", "Auto")
                        .WithMany("RecievedMissions")
                        .HasForeignKey("AutoId");

                    b.HasOne("Driver.Domain.Entities.MapReverse", "MapReverse")
                        .WithMany()
                        .HasForeignKey("MapReverseId");

                    b.HasOne("Driver.Domain.Entities.RecievedWeight", "RecievedWeight")
                        .WithOne("RecievedMission")
                        .HasForeignKey("Driver.Domain.Entities.RecievedMission", "RecievedWeightId");

                    b.Navigation("Auto");

                    b.Navigation("MapReverse");

                    b.Navigation("RecievedWeight");
                });

            modelBuilder.Entity("Driver.Domain.Entities.RecievedNumber", b =>
                {
                    b.HasOne("Domain.Entities.Auto", "Auto")
                        .WithMany("RecievedNumbers")
                        .HasForeignKey("AutoId");

                    b.HasOne("Driver.Domain.Entities.MapReverse", "MapReverse")
                        .WithMany()
                        .HasForeignKey("MapReverseId");

                    b.Navigation("Auto");

                    b.Navigation("MapReverse");
                });

            modelBuilder.Entity("Driver.Domain.Entities.RecievedSpeedAndTemprature", b =>
                {
                    b.HasOne("Domain.Entities.Auto", "Auto")
                        .WithMany("RecievedSpeedAndTempratures")
                        .HasForeignKey("AutoId");

                    b.HasOne("Driver.Domain.Entities.MapReverse", "MapReverse")
                        .WithMany()
                        .HasForeignKey("MapReverseId");

                    b.HasOne("Driver.Domain.Entities.RecievedWeight", "RecievedWeight")
                        .WithMany("RecievedSpeedAndTempratures")
                        .HasForeignKey("RecievedWeightId");

                    b.Navigation("Auto");

                    b.Navigation("MapReverse");

                    b.Navigation("RecievedWeight");
                });

            modelBuilder.Entity("Driver.Domain.Entities.RecievedWeight", b =>
                {
                    b.HasOne("Domain.Entities.Auto", "Auto")
                        .WithMany("RecievedWeights")
                        .HasForeignKey("AutoId");

                    b.HasOne("Driver.Domain.Entities.MapReverse", "MapReverse")
                        .WithMany()
                        .HasForeignKey("MapReverseId");

                    b.HasOne("Driver.Domain.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.Navigation("Auto");

                    b.Navigation("MapReverse");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("MaterialMine", b =>
                {
                    b.HasOne("Driver.Domain.Entities.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Mine", null)
                        .WithMany()
                        .HasForeignKey("MinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RolesPermissions", b =>
                {
                    b.HasOne("Driver.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsersMines", b =>
                {
                    b.HasOne("Domain.Entities.Mine", null)
                        .WithMany()
                        .HasForeignKey("MinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsersProvinces", b =>
                {
                    b.HasOne("Domain.Entities.Province", null)
                        .WithMany()
                        .HasForeignKey("ProvincesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Auto", b =>
                {
                    b.Navigation("RecievedErrors");

                    b.Navigation("RecievedMissions");

                    b.Navigation("RecievedNumbers");

                    b.Navigation("RecievedSpeedAndTempratures");

                    b.Navigation("RecievedWeights");
                });

            modelBuilder.Entity("Domain.Entities.AutoModel", b =>
                {
                    b.Navigation("Autos");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("Domain.Entities.Mine", b =>
                {
                    b.Navigation("Autos");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Navigation("Autos");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Driver.Domain.Entities.Document", b =>
                {
                    b.Navigation("Auto");

                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Driver.Domain.Entities.RecievedWeight", b =>
                {
                    b.Navigation("RecievedMission");

                    b.Navigation("RecievedSpeedAndTempratures");
                });
#pragma warning restore 612, 618
        }
    }
}
